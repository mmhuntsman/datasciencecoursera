demo()
persp()
psersp
demo(persp)
example
example()
example(persp)
demo(plotmath)
demo(scoping)
demo(Hershey)
demo(glm.vr)
demo(smooth)
demo(image)
demo(graphics)
slidify
slidify()
version
find.packages("devtools")
search
find()
find.package("devtools")
install.packages("devtools")
library(devtools)
find_rtools()
find_rtools()
install.packages("devtools")
library(devtools)
find_rtools()
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
x
y <- x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555)
c(z,555,z)
z * 2 + 100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c(0,10)
c(1,2,3,4) + c(0,10,100)
z * 2 + 1000
my_div
exit
exit()
end
## The function makeCacheMatrix is a list of
## sub-functions that will cache the inverse
## of a matrix.
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmat <- function(solve) m <<- solve
getmat <- function() m
list(set = set, get = get,
setmat = setmat,
getmat = getmat)
}
## The function cacheSolve receives the cache for
## the matrix returned by the makeCacheMatrix()
## function above. If the cache does not exists,
## it computes the inverse.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
z <- x$getmat()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
matrix <- x$get()
m <- solve(mat, ...)
x$setmat(m)
m
}
B = matrix(c(1,2,3,4),nrow = 2,ncol=2)
yy <- makeCacheMatrix(B)
ls.str(environment(yy$get))
cacheSolve(yy)
m <- matrix(data = c(5, 12, 3, 7, 5, 19, 31, 27, 5), nrow = 3, ncol = 3)
m2 <- makeCacheMatrix(m)
ls.str(environment(m2$get))
cacheSolve(m2)
View(m)
View(m)
View(m)
m <- null
m <- Null
rm m
rm(m)
m1 <- matrix(data = c(5, 12, 3, 7, 5, 19, 31, 27, 5), nrow = 3, ncol = 3)
m2 <- makeCacheMatrix(m1)
ls.str(environment(m2$get))
cacheSolve(m2)
?solve
?inverse
??inverse
## These functions take a matrix, compute its inverse and cache
## the inverse value of the matrix that was input
## This function creates a special "matrix" object that can cache ## its inverse
makeCacheMatrix <- function(x = matrix()) {
value <- NULL
set <- function(y) {
x <<- y
value <<- NULL
}
get <- function() x
setinverse <- function(inverse) value <<- inverse
getinverse <- function() value
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## This functions computes the inverse of the special "matrix"
## returned by the makeCacheMatrix function above. It the inverse
## has already been calculated, then the cachesolve should
## retrieve the inverse from the cache and tell the user it has
## done so
cacheSolve <- function(x, ...) {
value <- x$getinverse()
if(!is.null(value)) {
message("getting cached data")
return(value)
}
data <- x$get()
value <- solve(data, ...)
x$setinverse(value)
value
}
B = matrix(c(1,2,3,4),nrow = 2,ncol=2)
yy <- makeCacheMatrix(B)
ls.str(environment(yy$get))
cacheSolve(yy)
ls.str(environment(yy$get))
cacheSolve(yy)
source('D:/academic/datasciencecoursera/r-programing/Week4-Assignment/rankall.R')
getwd()
setwd("D:\\academic\\datasciencecoursera")
getwd()
